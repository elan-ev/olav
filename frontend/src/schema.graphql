# Auto-generated file: DO NOT EDIT DIRECTLY!
#
# This file is generated by `backend/api/src/bin/export-schema.rs`. The
# API itself is defined in `backend/api`.

type Event {
  id: ID!
  title: String!
  description: String
  "Duration in ms."
  duration: Float
  thumbnail: String!
  tracks: [Track!]!
  created: DateTimeUtc!
  updated: DateTimeUtc!
  creator: String
  series: Series
}

"A `Block`: a UI element that belongs to a realm."
interface Block {
  id: ID!
  index: Int!
  title: String
}

enum VideoListOrder {
  NEW_TO_OLD
  OLD_TO_NEW
}

"DateTime"
scalar DateTimeUtc

"A block just showing some text."
type TextBlock implements Block {
  content: String!
}

type Query {
  apiVersion: String!
  "Returns a flat list of all realms."
  realms: [Realm!]!
  """
    Returns the realm with the specific ID or `None` if the ID does not
    refer to a realm.
  """
  realmById(id: ID!): Realm
  """
    Returns the realm with the specific path or `None` if the path does not
    refer to a realm.

    Every realm has its own "path segment", and the full path of a realm
    is just the concatenation of all the path segments between the root realm
    and the realm in question, delimited by `"/"`. The root realm is assumed
    to have a path segment of `""`, and with the above rule so is its full
    path. The path of every other realm will start with `"/"` delimiting the
    root realm path segement from the second segment in the path.
  """
  realmByPath(path: String!): Realm
  "Returns the root realm."
  rootRealm: Realm!
  "Returns an event by its ID."
  event(id: ID!): Event
}

type Track {
  uri: String!
  flavor: String!
  mimetype: String
  resolution: [Int!]
}

"A block just showing the list of videos in an Opencast series"
type SeriesBlock implements Block {
  series: Series!
  layout: VideoListLayout!
  order: VideoListOrder!
}

type Realm {
  id: ID!
  name: String!
  isRoot: Boolean!
  path: String!
  parent: Realm
  parents: [Realm!]!
  children: [Realm!]!
  "Returns the (content) blocks of this realm."
  blocks: [Block!]!
}

type Series {
  id: ID!
  title: String!
  description: String
  events: [Event!]!
}

enum VideoListLayout {
  HORIZONTAL
  VERTICAL
  GRID
}

schema {
  query: Query
}
