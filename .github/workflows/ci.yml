name: CI

on: [pull_request, push]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: --deny warnings

jobs:
  main:
    name: 'Build & test'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Backend cache: this cache stores cargo caches and compiled dependencies to
    # speed up compiling the backend. We use a key consisting of the lock file,
    # the compiler version and the global compiler flags. If either of the
    # latter two change, everything is recompiled anyway. The lockfile is used,
    # too, to avoid caching dependencies that have been removed already. Also
    # compare: https://github.com/actions/cache/blob/main/examples.md#rust---cargo
    - name: Prepare backend cache key
      run: |
        cp backend/Cargo.lock cache-fingerprint
        echo "$RUSTFLAGS $(rustc -V)" >> cache-fingerprint
    - name: Restore backend cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('cache-fingerprint') }}

    # Frontend cache: only the NPM folder is cached, not the node_modules, as
    # recommended here: https://github.com/actions/cache/blob/main/examples.md#node---npm
    - name: Restore NPM cache
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

    # The actual building and testing!
    - name: Build backend API and schema exporter
      working-directory: backend
      run: cargo build --bin export_schema
    - name: Export API schema
      working-directory: backend
      run: |
        mkdir ../frontend/build
        cargo run --bin export_schema -- ../frontend/build/schema.graphql

    - name: Installing frontend dependencies (npm ci)
      working-directory: frontend
      run: npm ci
    - name: Build frontend
      working-directory: frontend
      run: npx webpack --mode=development --display-error-details
    - name: Typecheck frontend
      working-directory: frontend
      run: npm run typecheck
    - name: Lint frontend
      working-directory: frontend
      run: npx eslint --max-warnings 0 src

    - name: Build backend
      working-directory: backend
      run: cargo build --all-targets
    - name: Test backend
      working-directory: backend
      run: cargo test
    - name: Generate documenation for backend
      working-directory: backend
      run: cargo doc --no-deps
